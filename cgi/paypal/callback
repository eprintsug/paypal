use Business::PayPal::IPN;
use JSON;
use EPrints;
use strict;

# use sandbox
$Business::PayPal::IPN::GTW = 'https://www.sandbox.paypal.com/cgi-bin/webscr';

my $ipn = new Business::PayPal::IPN() or die Business::PayPal::IPN->error();

unless( $ipn->completed ) {
	# TODO log
	exit;
}

# respond to paypal
print $ipn->cgi->header('text/plain');

my $eprints = EPrints->new;
my $repo = $eprints->current_repository;
exit( 0 ) unless( defined $repo );

# check the receiver_email
unless( $ipn->receiver_email eq $repo->config( qw( paypal merchantid ) ) )
{
	# TODO log
	exit;
}

# check its a transaction we expect (shopping cart transaction)
unless( $ipn->txn_type eq "cart" )
{
	# TODO log
	exit;
}

# check that this transaction has not already been processed
my $list = $repo->dataset( "paypal_order" )->search(
	filters => [
		{ meta_fields => [qw( txn_id )], value => $ipn->txn_id, match => "EX" }
	]
);
if( $list->count )
{
	# TODO log
	exit;
}

# TODO check that payment amount and currency are correct
# foreach item, check mc_gross_x

my %ipndata = $ipn->vars;

my %epdata;
foreach my $field ( $repo->dataset( "paypal_orders" )->fields )
{
	next unless EPrints::Utils::is_set( $ipndata{$field->name} );
	$epdata{$field->name} = $ipndata{$field->name};
}

$epdata{_raw} = to_json( \%ipndata );
$epdata{userid} = $ipn->custom;

my @items;
for( 1..$ipn->num_cart_items )
{
	push @items, {
		name => $ipndata{"item_name_$_"},
		number => $ipndata{"item_number_$_"},
		gross => $ipndata{"mc_gross_$_"},
	}
}
$epdata{items} = \@items;

my $order = $repo->dataset( "paypal_order" )->create_dataobj( \%epdata );
unless( defined $order )
{
	# TODO log
	exit;
}

$order->commit;
